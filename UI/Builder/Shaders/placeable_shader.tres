[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://bxo7tvkp1gkx8"]

[sub_resource type="VisualShaderNodeBooleanParameter" id="VisualShaderNodeBooleanParameter_b4dpi"]
parameter_name = "IsPlaceable"
default_value_enabled = true
default_value = true

[sub_resource type="VisualShaderNodeFloatOp" id="VisualShaderNodeFloatOp_rwh13"]
default_input_values = [0, 0.0, 1, 0.7]
operator = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_30bse"]
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_cu7op"]
default_input_values = [0, 0.0, 1, 1.0, 2, 1e-05, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_t3qf1"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_tp66p"]
constant = Color(0.459852, 1, 0.317708, 1)

[sub_resource type="VisualShaderNodeColorConstant" id="VisualShaderNodeColorConstant_fndp2"]
constant = Color(0.98865, 0.310309, 0.361039, 1)

[sub_resource type="VisualShaderNodeVectorOp" id="VisualShaderNodeVectorOp_afsl5"]
default_input_values = [0, Quaternion(0, 0, 0, 0), 1, Quaternion(0, 0, 0, 0)]
op_type = 2
operator = 2

[resource]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix, unshaded;

uniform bool IsPlaceable = true;



void fragment() {
// BooleanParameter:10
	bool n_out10p0 = IsPlaceable;


// Input:2
	vec4 n_out2p0 = COLOR;
	float n_out2p4 = n_out2p0.a;


// ColorConstant:7
	vec4 n_out7p0 = vec4(0.459852, 1.000000, 0.317708, 1.000000);


// VectorOp:6
	vec4 n_out6p0 = n_out2p0 * n_out7p0;


// ColorConstant:8
	vec4 n_out8p0 = vec4(0.988650, 0.310309, 0.361039, 1.000000);


// VectorOp:9
	vec4 n_out9p0 = n_out2p0 * n_out8p0;


	vec3 n_out4p0;
// If:4
	float n_in4p1 = 1.00000;
	float n_in4p2 = 0.00001;
	if(abs((n_out10p0 ? 1.0 : 0.0) - n_in4p1) < n_in4p2)
	{
		n_out4p0 = vec3(n_out6p0.xyz);
	}
	else if((n_out10p0 ? 1.0 : 0.0) < n_in4p1)
	{
		n_out4p0 = vec3(n_out9p0.xyz);
	}
	else
	{
		n_out4p0 = vec3(n_out6p0.xyz);
	}


// FloatOp:11
	float n_in11p1 = 0.70000;
	float n_out11p0 = n_out2p4 * n_in11p1;


// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out11p0;


}
"
mode = 1
flags/unshaded = true
flags/light_only = false
nodes/fragment/0/position = Vector2(80, 400)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_30bse")
nodes/fragment/2/position = Vector2(-720, 340)
nodes/fragment/4/node = SubResource("VisualShaderNodeIf_cu7op")
nodes/fragment/4/position = Vector2(-100, 260)
nodes/fragment/6/node = SubResource("VisualShaderNodeVectorOp_t3qf1")
nodes/fragment/6/position = Vector2(-300, 240)
nodes/fragment/7/node = SubResource("VisualShaderNodeColorConstant_tp66p")
nodes/fragment/7/position = Vector2(-580, 280)
nodes/fragment/8/node = SubResource("VisualShaderNodeColorConstant_fndp2")
nodes/fragment/8/position = Vector2(-580, 460)
nodes/fragment/9/node = SubResource("VisualShaderNodeVectorOp_afsl5")
nodes/fragment/9/position = Vector2(-300, 360)
nodes/fragment/10/node = SubResource("VisualShaderNodeBooleanParameter_b4dpi")
nodes/fragment/10/position = Vector2(-380, 100)
nodes/fragment/11/node = SubResource("VisualShaderNodeFloatOp_rwh13")
nodes/fragment/11/position = Vector2(-300, 480)
nodes/fragment/connections = PackedInt32Array(2, 0, 6, 0, 7, 0, 6, 1, 8, 0, 9, 1, 2, 0, 9, 0, 6, 0, 4, 3, 6, 0, 4, 4, 9, 0, 4, 5, 10, 0, 4, 0, 4, 0, 0, 0, 2, 4, 11, 0, 11, 0, 0, 1)
